import React, { useState, useEffect } from 'react';
import { SafeAreaView, View, ScrollView, Switch, Alert } from 'react-native';
import { Typography } from '@/components/Typography/typography.component';
import { BackButton } from '@/components/BackButton/back-button.component';
import { useAuthStore } from '@/zustand/useAuthStore';
import { colors } from '@/constants/colors.constant';
import styles from './notifications.style';
import { NotificationsScreenProps } from '@/types/main.type';
import { api } from '@/api/api';
import { User } from '@/types/user.type';

function Notifications({ navigation }: NotificationsScreenProps) {
  const { user, setUser } = useAuthStore();
  const [notificationsEnabled, setNotificationsEnabled] = useState(false);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  useEffect(() => {
    if (user?.notificationsEnabled !== undefined) {
      setNotificationsEnabled(user.notificationsEnabled);
    }
  }, [user?.notificationsEnabled]);

  const handleToggleNotifications = async (value: boolean) => {
    setLoading(true);
    setError('');

    try {
      const response = await api.patch<{ user: User }>('/users/notifications', {
        notifications: value,
      });

      setUser(response.data.user);
      setNotificationsEnabled(value);

      Alert.alert(
        value ? '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã' : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã',
        value
          ? '–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ñ–∞–∫—Ç–∞—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö.'
          : '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏—Ö –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.',
        [{ text: 'OK' }]
      );
    } catch (err: any) {
      setError(err.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');
      // Revert the toggle if there was an error
      setNotificationsEnabled(!value);
    } finally {
      setLoading(false);
    }
  };

  return (
    <SafeAreaView style={styles.container}>
      <ScrollView contentContainerStyle={styles.scrollContent}>
        <BackButton onPress={() => navigation.goBack()} style={styles.backButton} />

        <View style={styles.header}>
          <Typography variant="h1" style={styles.title}>
            –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
          </Typography>
          <Typography variant="regularText" style={styles.subtitle}>
            –£–ø—Ä–∞–≤–ª—è–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
          </Typography>
        </View>

        {error ? (
          <Typography variant="regularText" style={styles.error}>
            {error}
          </Typography>
        ) : null}

        <View style={styles.settingsContainer}>
          <View style={styles.settingItem}>
            <View style={styles.settingLeft}>
              <View style={styles.settingIcon}>
                <Typography variant="regularText" style={styles.settingIconText}>
                  üîî
                </Typography>
              </View>
              <View style={styles.settingContent}>
                <Typography variant="regularText" style={styles.settingTitle}>
                  Push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                </Typography>
                <Typography variant="regularText" style={styles.settingSubtitle}>
                  –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ñ–∞–∫—Ç–∞—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö
                </Typography>
              </View>
            </View>
            <Switch
              value={notificationsEnabled}
              onValueChange={handleToggleNotifications}
              disabled={loading}
              trackColor={{ false: colors.lightGrey, true: colors.teal }}
              thumbColor={notificationsEnabled ? colors.white : colors.lightBlueGrey}
              ios_backgroundColor={colors.lightGrey}
            />
          </View>
        </View>

        <View style={styles.infoContainer}>
          <Typography variant="regularText" style={styles.infoTitle}>
            –ß—Ç–æ –≤–∫–ª—é—á–∞—é—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:
          </Typography>
          <View style={styles.infoList}>
            <View style={styles.infoItem}>
              <Typography variant="regularText" style={styles.infoBullet}>
                ‚Ä¢
              </Typography>
              <Typography variant="regularText" style={styles.infoText}>
                –ù–æ–≤—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –≤ –≤–∞—à–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
              </Typography>
            </View>
            <View style={styles.infoItem}>
              <Typography variant="regularText" style={styles.infoBullet}>
                ‚Ä¢
              </Typography>
              <Typography variant="regularText" style={styles.infoText}>
                –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–∫—Ç–æ–≤
              </Typography>
            </View>
            <View style={styles.infoItem}>
              <Typography variant="regularText" style={styles.infoBullet}>
                ‚Ä¢
              </Typography>
              <Typography variant="regularText" style={styles.infoText}>
                –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ –Ω–æ–≤–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
              </Typography>
            </View>
          </View>
        </View>

        <View style={styles.noteContainer}>
          <Typography variant="regularText" style={styles.noteText}>
            üí° –°–æ–≤–µ—Ç: –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ñ–∞–∫—Ç—ã –∏ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤
            –∫—É—Ä—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
          </Typography>
        </View>
      </ScrollView>
    </SafeAreaView>
  );
}

export default Notifications;
